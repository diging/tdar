<?xml version="1.0"?>
<!-- $Id$ -->
<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:util="http://www.springframework.org/schema/util">

    <task:annotation-driven />
    <task:scheduler id="taskScheduler" pool-size="2"/>

    <!-- scan all subpackages of org.tdar for spring stereotype annotations
        eligible for autowiring -->
    <context:component-scan base-package="org.tdar">
        <!-- don't duplicate application configurations -->
        <context:exclude-filter type="assignable" expression="org.tdar.core.configuration.TdarAppConfiguration" />

        <!--don't register any scheduled tasks during testing -->
        <context:exclude-filter type="assignable" expression="org.tdar.core.bean.util.ScheduledProcess" />
    </context:component-scan>

    <context:property-placeholder
            location="classpath:hibernate.properties,classpath:crowd.properties,classpath:tdar.properties"
            ignore-unresolvable="true" />

    <!--<import resource="spring-local-settings.xml" />-->
    <import resource="pooling/c3p0.xml" />

    <!-- hibernate session factory configuration -->
    <import resource='spring-hibernate.xml' />
    <!-- Spring transaction interceptors and managers -->

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!-- spring JavaMailSenderImpl configuration to be autowired into the EmailService -->
    <bean id="javaMailSender" class="org.tdar.core.service.external.MockMailSender" name="mailSender">
        <property name="host" value="${mail.smtp.host:localhost}" />
    </bean>

    <bean id="freemarkerMailConfiguration"
          class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
        <property name="templateLoaderPaths">
            <list>
                <value>classpath:/freemarker-templates</value>
                <value>file:/WEB-INF/freemarker-templates</value>
                <value>classpath:/WEB-INF/content</value>
                <value>classpath:src/main/webapp</value>
                <value>file:src/main/webapp</value>
                <value>classpath:/freemarker-templates-test</value>
                <value>classpath:/templates</value>
                <value>file:/templates</value>
            </list>
        </property>
    </bean>

    <!-- tells spring to proxy our concrete classes (using cglib) instead of
        using JDK dynamic proxies (requires interfaces) -->
    <tx:annotation-driven proxy-target-class='true' />


    <!--<util:properties id="crowdProperties" location="classpath:crowd.properties" />-->
    <!--<import resource='spring-crowd.xml' />-->
    <!--<bean name="AuthenticationProvider" class="org.tdar.core.dao.external.auth.CrowdRestDao" />-->

    <bean id='sessionData' class='org.tdar.web.SessionData' scope='singleton' />
    <bean name="AuthenticationProvider" class="org.tdar.core.dao.external.auth.MockAuthenticationProvider" />
    <bean name="DoiProvider" class="org.tdar.core.dao.external.pid.EZIDDao" />
</beans>
