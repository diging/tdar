<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<context:annotation-config />

	<!-- For tests we want a singleton since we want setup of tests to be persistent,
	BUT we need to make sure things are initialised each time to ensure tests are independent. -->
	<bean id="testingRepositoryService" class="org.tdar.odata.server.StubRepositoryService"
		autowire-candidate="true"
		scope="singleton" >
		<constructor-arg>
			<list>
				<value>TDataSets</value>
				<value>TDataTables</value>
				<value>TDataRecords</value>
				<value>Amerindian Carvings</value>
<!-- 				<value>Grecian Urns</value>
				<value>Amerindian Carvings</value>
 -->			</list>
		</constructor-arg>
	</bean>
	
	<!-- The factory initialises the producer internally so it is not Spring-managed and therefore does not need transactionManager injection. -->
	<bean id="producerFactory" class="org.tdar.odata.server.TDarODataProducerFactory" autowire-candidate="true" >
		<constructor-arg ref="testingRepositoryService" />
		<constructor-arg ref="metaDataBuilder" />

	</bean>

	<!-- for the database integration test applicationContext.xml provides this -->
	<tx:annotation-driven proxy-target-class='true' />
	<bean id='sessionData' class='org.tdar.web.SessionData' scope='session'>
		<aop:scoped-proxy />
	</bean>

</beans>
