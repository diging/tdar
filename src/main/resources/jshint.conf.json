{
    /*
        Enforcing Options
        When enabled, these options will make JSHint produce more warnings about your code.
     */

    "bitwise"       : true,      // Prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others. Bitwise operators are very rare in JavaScript programs and quite often & is simply a mistyped &&.
    "camelcase"     : false,     // Allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores.
    "curly"         : true,      // Requires you to always put curly braces around blocks in loops and conditionals.
    "eqeqeq"        : true,      // Prohibits the use of == and != in favor of === and !==.
    "es3"           : false,     // Tells JSHint that your code needs to adhere to ECMAScript 3 specification. Use if you need compatibility w/  older browsers—such as IE 6/7/8/9—and.
    "forin"         : true,      // Requires all for in loops to filter object's items using obj.hasOwnProperty(key).
    "freeze"        : true,      // Prohibits overwriting prototypes of native objects such as Array, Date and so on.
    "immed"         : true,      // Prohibits the use of immediate function invocations without wrapping them in parentheses.
    "latedef"       : true,      // Prohibits the use of a variable before it was defined.
    "newcap"        : true,      // Requires you to capitalize names of constructor functions.
    "noarg"         : true,      // Prohibits the use of arguments.caller and arguments.callee.
    "noempty"       : false,     // Warns when you have an empty block in your code.
    "nonbsp"        : true,      // Warns about "non-breaking whitespace" characters.
    "nonew"         : true,      // Prohibits the use of constructor functions without without an assigning result.
    "plusplus"      : false,     // Prohibits the use of unary increment and decrement operators.
    "quotmark"      : false,      // accepts three values: true to enforce consistency, "single" to enforce single quotes, "double" to enforce doublequotes
    "undef"         : true,      // Prohibits the use of explicitly undeclared variables. Very useful for spotting leaking and mistyped variables.
    "unused"        : true,      // Warns when you define and never use your variables. It is very useful for general code cleanup, especially when used in addition to undef.
    "strict"        : true,      // Requires all functions to run in ECMAScript 5's strict mode.
    "trailing"      : false,      // Makes it an error to leave a trailing whitespace in your code. Trailing whitespaces can be source of nasty bugs with multi-line strings in JavaScript:

    "indent"        : false,     // Enforces specific tab width for your code.  Specify a number or false to disable.
    "maxparams"     : 10,        // Lets you set the max number of formal parameters allowed per function:
    "maxdepth"      : 10,        // Lets you control how nested do you want your blocks to be:
    "maxcomplexity" : 20,        // Lets you control cyclomatic complexity throughout your code.  (see http://en.wikipedia.org/wiki/Cyclomatic_complexity)
    "maxlen"        : 200,       // Lets you set the maximum length of a line.
    "maxstatements" : 1000,      // Lets you set the max number of statements allowed per function:

    /*
        Relaxing Options
        When enabled, these options will make JSHint produce less warnings about your code.
     */

    "asi"           : true,      // Suppresses warnings about missing semicolons. (see  http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding)
    //"lastsemic"     : false,   // Suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block:
    "boss"          : false,     // Suppresses warnings about the use of assignments in cases where comparisons are expected. More often than not, code like if (a = 10) {} is a typo.
    "debug"         : false,     // Suppresses warnings about the debugger statements in your code.
    "eqnull"        : false,     // Suppresses warnings about == null comparisons. Such comparisons are often useful when you want to check if a variable is null or undefined.
    "evil"          : false,     // Suppresses warnings about the use of eval.
    "expr"          : false,     // Suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls (usually a sign of a typo)
    "funcscope"     : false,     // Suppresses warnings about declaring variables inside of control structures while accessing them later from the outside (which is valid but not recommended).
    "globalstrict"  : false,     // Suppresses warnings about the use of global strict mode. Global strict mode can break third-party widgets so it is not recommended.
    "iterator"      : false,     // Suppresses warnings about the __iterator__ property. This property is not supported by all browsers so use it carefully.
    "laxbreak"      : false,     // Suppresses most of the warnings about possibly unsafe line breakings in your code. It doesn't suppress warnings about comma-first coding style. To suppress those you have to use laxcomma (see below).
    "laxcomma"      : true,      // Suppresses warnings about comma-first coding style. 
    "loopfunc"      : false,     // Suppresses warnings about functions inside of loops. Defining functions inside of loops can lead to bugs such as this one:
    "multistr"      : false,     // Suppresses warnings about multi-line strings. Multi-line strings can be dangerous in JavaScript because all hell breaks loose if you accidentally put a whitespace in between the escape character (\) and a new line.
    "notypeof"      : false,     // Suppresses warnings about invalid typeof operator values. This operator has only a limited set of possible return values. By default, JSHint warns when you compare its result with an invalid value which often can be a typo.
    "proto"         : false,     // Suppresses warnings about the __proto__ property.
    "scripturl"     : false,     // Suppresses warnings about the use of script-targeted URLs—such as javascript:....
    "smarttabs"     : true,      // Suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only. The technique is called SmartTabs.
    "shadow"        : false,     // Suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared somewhere in the outer scope.
    "sub"           : true,      // Suppresses warnings about using [] notation when it can be expressed in dot notation: person['name'] vs. person.name.
    "supernew"      : false,     // Suppresses warnings about "weird" constructions like new function () { ... } and new Object;. Such constructions are sometimes used to produce singletons in JavaScript:
    "validthis"     : true,      // Suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function.
    "noyield"       : false,     // Suppresses warnings about generator functions with no yield statement in them.

    "esnext"        : false,     // Tells JSHint that your code uses ECMAScript 6 specific syntax features (not all browsers implement them).
    "moz"           : false,     // Tells JSHint that your code uses Mozilla JavaScript extensions.
    "gcl"           : false,     // Makes JSHint compatible with Google Closure Compiler.

    "maxerr"        : 0xDEAD,    // Max warnings JSHint will produce before giving up. Default is 50.


    /*
        Environments
        These options let JSHint know about some pre-defined global variables
     */
    "browser"       : true,      //  Globals exposed by modern browsers: all the way from good old document and navigator to the HTML5 FileReader and other new developments in the browser world.
    "nonstandard"   : true,      //  Non-standard but widely adopted globals such as escape and unescape.
    "jquery"        : true,     //  Globals exposed by the jQuery JavaScript library.

    "couch"         : false,    //  Globals exposed by CouchDB. CouchDB is a document-oriented database that can be queried and indexed in a MapReduce fashion using JavaScript.
    "devel"         : false,    //  Globals that are usually used for logging poor-man's debugging: console, alert, etc. It is usually a good idea to not ship them in production because, for example, console.log breaks in legacy versions of Internet Explorer.
    "dojo"          : false,    //  Globals exposed by the Dojo Toolkit.
    "mootools"      : false,    //  Globals exposed by the MooTools JavaScript framework.
    "node"          : false,    //  Globals available when your code is running inside of the Node runtime environment. Node.js is a server-side JavaScript environment that uses an asynchronous event-driven model. This option also skips some warnings that make sense in the browser environments but don't make sense
    "phantom"       : false,    //  Globals available when your core is running inside of the PhantomJS runtime environment. PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.
    "prototypejs"   : false,    //  Globals exposed by the Prototype JavaScript framework.
    "rhino"         : false,    //  Globals available when your code is running inside of the Rhino runtime environment. Rhino is an open-source implementation of JavaScript written entirely in Java.
    "worker"        : false,    //  Globals available when your code is running inside of a Web Worker. Web Workers provide a simple means for web content to run scripts in background threads.
    "wsh"           : false,    //  Globals available when your code is running as a script for the Windows Script Host.
    "yui"           : false,    //  Globals exposed by the YUI JavaScript framework.

    // Catch-all for globals not defined above.   You can also declare globals with inline directives (see jsHint docs)
    "globals" : {
        "_gac"      : true,      // google analytics, I think.
        "TDAR"      : true,      // top-level TDAR namespace.
        "console"   : true     // used in most browsers, and tdar.core.js has fallback definition for IE8
    }
}