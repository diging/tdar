package org.tdar.core.service;

import java.util.List;
import java.util.Map;
import java.util.WeakHashMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.tdar.core.bean.PersonalFilestoreTicket;
import org.tdar.core.bean.entity.Person;
import org.tdar.filestore.BagitPersonalFilestore;
import org.tdar.filestore.PersonalFileType;
import org.tdar.filestore.PersonalFilestore;
import org.tdar.filestore.PersonalFilestoreFile;

/**
 * $Id$
 * 
 * Provides access to the PersonalFilestore.
 * 
 * FIXME: rename to PersonalFilestoreService
 * 
 * @author <a href='jim.devos@asu.edu'>Jim Devos</a>, <a href='mailto:allen.lee@asu.edu'>Allen Lee</a>
 * @version $Rev$
 */
@Service
public class FilestoreService {

    @Autowired
    private GenericService genericService;

    // FIXME: double check that won't leak memory
    private Map<Person, PersonalFilestore> personalFilestoreCache = new WeakHashMap<Person, PersonalFilestore>();

    /**
     * Creates a new PersonalFilestoreTicket that the personal filestore can use to create a filestore in a unique location.
     * 
     * @return a new PersonalFilestoreTicket used to keep track of files uploaded by the given Person
     */
    public PersonalFilestoreTicket createPersonalFilestoreTicket(Person person) {
        return createPersonalFilestoreTicket(person, PersonalFileType.UPLOAD);
    }

    /**
     * Creates a new PersonalFilestoreTicket for the given Person with the given PersonalFileType (either UPLOAD or INTEGRATION)
     * 
     * @param person
     * @param fileType
     *            whether or not the ticket is being created for an upload or data integration process.
     * @return a new PersonalFilestoreTicket used to keep track of files generated by the given Person (either uploaded or via data integration)
     */
    public PersonalFilestoreTicket createPersonalFilestoreTicket(Person person, PersonalFileType fileType) {
        PersonalFilestoreTicket tfg = new PersonalFilestoreTicket();
        tfg.setSubmitter(person);
        tfg.setPersonalFileType(fileType);
        genericService.save(tfg);

        // FIXME: it uses the ID as the ticket, but needs to check whether the ticket actually exists
        return tfg;
    }

    /**
     * Returns a personal filestore for the given user.
     * FIXME: should this be based on the PersonalFilestoreTicket instead?
     * 
     * @param submitter
     * @return a properly synchronized filestore for the given user.
     */
    public synchronized PersonalFilestore getPersonalFilestore(Person submitter) {
        PersonalFilestore personalFilestore = personalFilestoreCache.get(submitter);
        if (personalFilestore == null) {
            personalFilestore = new BagitPersonalFilestore();
            personalFilestoreCache.put(submitter, personalFilestore);
        }
        return personalFilestore;
    }

    public PersonalFilestoreTicket findPersonalFilestoreTicket(Long ticketId) {
        return genericService.find(PersonalFilestoreTicket.class, ticketId);
    }

    public List<PersonalFilestoreFile> retrieveAllPersonalFilestoreFiles(PersonalFilestoreTicket ticket) {
        return getPersonalFilestore(ticket).retrieveAll(ticket);
    }

    public List<PersonalFilestoreFile> retrieveAllPersonalFilestoreFiles(Long ticketId) {
        PersonalFilestoreTicket ticket = findPersonalFilestoreTicket(ticketId);
        if (ticket != null) {
            return getPersonalFilestore(ticket).retrieveAll(ticket);
        }
        return null;
    }

    public synchronized PersonalFilestore getPersonalFilestore(PersonalFilestoreTicket ticket) {
        return getPersonalFilestore(ticket.getSubmitter());
    }

    public synchronized PersonalFilestore getPersonalFilestore(Long ticketId) {
        PersonalFilestoreTicket ticket = findPersonalFilestoreTicket(ticketId);
        return getPersonalFilestore(ticket);
    }

}
