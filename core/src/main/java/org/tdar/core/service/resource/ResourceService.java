package org.tdar.core.service.resource;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.hibernate.ScrollableResults;
import org.tdar.core.bean.HasResource;
import org.tdar.core.bean.billing.BillingAccount;
import org.tdar.core.bean.collection.RequestCollection;
import org.tdar.core.bean.collection.ResourceCollection;
import org.tdar.core.bean.coverage.LatitudeLongitudeBox;
import org.tdar.core.bean.entity.Person;
import org.tdar.core.bean.entity.TdarUser;
import org.tdar.core.bean.resource.InformationResource;
import org.tdar.core.bean.resource.Project;
import org.tdar.core.bean.resource.Resource;
import org.tdar.core.bean.resource.ResourceRevisionLog;
import org.tdar.core.bean.resource.ResourceType;
import org.tdar.core.bean.resource.RevisionLogType;
import org.tdar.core.bean.resource.Status;
import org.tdar.core.bean.resource.datatable.DataTableColumn;
import org.tdar.core.cache.HomepageGeographicCache;
import org.tdar.core.cache.HomepageResourceCountCache;
import org.tdar.core.dao.resource.ResourceTypeStatusInfo;
import org.tdar.core.dao.resource.stats.ResourceSpaceUsageStatistic;
import org.tdar.core.service.DeleteIssue;
import org.tdar.core.service.ResourceCreatorProxy;
import org.tdar.search.query.SearchResultHandler;

import com.opensymphony.xwork2.TextProvider;
import com.redfin.sitemapgenerator.GoogleImageSitemapGenerator;

public interface ResourceService {

    List<Resource> findSkeletonsForSearch(boolean trustCache, List<Long> ids);

    List<Resource> findOld(Long... ids);

    /**
     * Find all @Link Resource Ids submitted by @link Person
     * 
     * @param person
     * @return
     */
    Set<Long> findResourcesSubmittedByUser(Person person);

    /**
     * Find @link Resource by Id only.
     * 
     * @param id
     * @return
     */
    <R extends Resource> R find(Long id);

    /**
     * Finds all Resources within tDAR and populates them with sparse data -- Title, Description, Date.
     * 
     * @return
     */
    List<Resource> findAllSparseActiveResources();

    /**
     * Finds @link Resource entries that have been modified recently.
     */
    List<Resource> findRecentlyUpdatedItemsInLastXDays(int days);

    /**
     * Adds a @link ResourceRevisionLog entry for the resource based on the message.
     * 
     * @param <T>
     * @param modifiedResource
     * @param message
     * @param payload
     */
    <T extends Resource> void logResourceModification(T modifiedResource, TdarUser person, String message, RevisionLogType type);

    <T extends Resource> void logResourceModification(T modifiedResource, TdarUser person, String message, String payload, RevisionLogType type,
            Long startTime);

    /**
     * Adds a @link ResourceRevisionLog entry for the resource based on the message.
     * 
     * @param <T>
     * @param modifiedResource
     * @param message
     * @param payload
     */
    <T extends Resource> void logResourceModification(T modifiedResource, TdarUser person, String message, String payload, RevisionLogType type);

    /**
     * Lists all tDAR @link Status entries.
     * 
     * @return
     */
    List<Status> findAllStatuses();

    /**
     * For a given @link Resource, increment the Access Count by creating a @link ResourceAccessStatistic Entry. This is a service-layer function because (a)
     * this may happen when the session is not writable, and we're going to make the explicit bean writable, and (b) because it's a transient (separate) value.
     * 
     * @param r
     */
    void incrementAccessCounter(Resource r, boolean b);

    /**
     * Updates the transient access count entry on @link Resource
     * 
     * @param resource
     */
    void updateTransientAccessCount(Resource resource);

    /**
     * Provides a count of the total number of active resources.
     * 
     * @param type
     * @return
     */
    Number countActiveResources(ResourceType type);

    /**
     * Provides a count of the total number of active resources with files.
     * 
     * @param type
     * @return
     */
    Number countActiveResourcesWithFiles(ResourceType type);

    /**
     * Provides counts of Country Codes in tDAR based on the Managed Geographic Keywords which are generated by the tDAR GIS Database and lookups comparing a
     * LatLong to a shapefile. These are used on the homepage map.
     * 
     * @return
     */
    List<HomepageGeographicCache> getISOGeographicCounts();

    Map<DataTableColumn, String> getMappedDataForInformationResource(InformationResource resource, boolean failOnMissing);

    /**
     * For a given @link Resource and set of @link LatitudeLogitudeBox entries, pass the LatitudeLogitudeBoxes to the @link GeographicSearchService to generate
     * GeographicKeyword entries from the LatitudeLogitudeBox. The implementation will clear the old keywords when creating the new ones. It will use Shapefiles
     * and the tdar_gis database (tdar.support repo) to look up where the LatitudeLogitudeBox is.
     * 
     * @param resource
     * @param allLatLongBoxes
     */
    void processManagedKeywords(Resource resource, Collection<LatitudeLongitudeBox> allLatLongBoxes);

    /**
     * Given a collection of hibernate-managed beans (the 'current' collection) and another collection of transient beans (the 'incoming' collection),
     * update the current collection to match the contents of the incoming collection. This method will associate all elements in the incoming collection
     * with the specified resource. Contents of both collections should satisfy the HasResource interface.
     * 
     * @param resource
     *            the 'owner' of the elements in the incoming collection. This method will associate all elements of the incoming collection with this resource.
     * @param shouldSave
     *            if true, this method will persist elements of the incoming collection.
     * @param validateMethod
     *            determines what validation steps (if any) to perform on each element of the incoming collection
     * @param incoming_
     *            the incoming collection of HasResource elements.
     * @param current
     *            the current collection of HasResource elements. This method will modify collection to contain the same elements as the incoming collection.
     * @param cls
     *            type of the collection elements.
     */
    <H extends HasResource<R>, R extends Resource> void saveHasResources(R resource, boolean shouldSave, ErrorHandling validateMethod,
            Collection<H> incoming__,
            Set<H> current, Class<H> cls);

    /**
     * Find all of the Resource Counts for the homepage which are cached in @link HomepageResourceCountCache entries because the counts take too long to load
     * dynamically.
     * 
     * @return
     */
    List<HomepageResourceCountCache> getResourceCounts();

    /**
     * For the Dashboard, create a Map<> of ResourceType to Status & Count for a given @link Person User. This map can be used to generate the two graphs on the
     * dashboard.
     * 
     * @param p
     * @param resourceTypes
     * @return
     */
    ResourceTypeStatusInfo getResourceCountAndStatusForUser(Person p, List<ResourceType> resourceTypes);

    /**
     * For a given @link ResourceType and @link Status provide a count of @link Resource entries.
     * 
     * @param resourceType
     * @param status
     * @return
     */
    Long getResourceCount(ResourceType resourceType, Status status);

    <T extends Resource> void clearOneToManyIds(T resource);

    /**
     * Use by the @link BulkUploadService, we use a proxy @link Resource (image) to create a new @link Resource of the specified type. This is really a deep
     * copy method
     * 
     * @param proxy
     * @param resourceClass
     * @return
     */
    <T extends Resource> T createResourceFrom(TdarUser authenticatedUser, Resource proxy, Class<T> resourceClass, boolean save);

    /**
     * Given a Set of objects that support @link HasResource, clone the bean and attach it to the new Set
     * 
     * @param resource
     * @param targetCollection
     * @param sourceCollection
     * @return
     */
    <T extends HasResource<Resource>> Set<T> cloneSet(Resource resource, Set<T> targetCollection, Set<T> sourceCollection);

    ResourceSpaceUsageStatistic getResourceSpaceUsageStatistics(List<Long> resourceId, List<Status> status);

    ResourceSpaceUsageStatistic getResourceSpaceUsageStatisticsForProject(Long id, List<Status> status);

    ResourceSpaceUsageStatistic getSpaceUsageForCollections(List<Long> collectionId, List<Status> statuses);

    ResourceSpaceUsageStatistic getResourceSpaceUsageStatisticsForUser(List<Long> accountId, List<Status> status);

    /**
     * Return all resource revision log entries for a specified @link Resource.
     * 
     * @param resource
     * @return
     */
    List<ResourceRevisionLog> getLogsForResource(Resource resource);

    /**
     * Find all ids of @link InformationResource entries that actually have files.
     * 
     * @return
     */
    List<Long> findAllResourceIdsWithFiles();

    /**
     * Find all @link ResourceType entries that are active within the system (as opposed to exist).
     * 
     * @return
     */
    List<ResourceType> getAllResourceTypes();

    int findAllResourcesWithPublicImagesForSitemap(GoogleImageSitemapGenerator gisg);

    List<Resource> findByTdarYear(SearchResultHandler<Resource> resultHandler, int year);

    List<Resource> getWeeklyPopularResources();

    List<Resource> getWeeklyPopularResources(int count);

    void saveResourceCreatorsFromProxies(Collection<ResourceCreatorProxy> allProxies, Resource resource, boolean shouldSaveResource);

    DeleteIssue getDeletionIssues(TextProvider provider, Resource persistable);

    void deleteForController(Resource resource, String reason_, TdarUser authUser);

    ScrollableResults findAllActiveScrollableForSitemap();

    void evictHomepageMapCache();

    void evictResourceCountCache();

    void evictDecadeCountCache();

    void evictBrowseYearCountCache();

    void evictPopularResourceCache();

    void evictHomepageFeaturedItemCache();

    void evictBrowseYearCountcache();

    ScrollableResults findMappedResources();

    ScrollableResults findMappedResources(Project p);

    String getGoogleScholarTags(Resource resource);

    String getSchemaOrgJsonLD(Resource resource);

    void updateBatch(BillingAccount account, ResourceCollection collectionToAdd, List<Long> ids, List<Integer> dates, List<String> titles,
            List<String> descriptions, TdarUser authenticatedUser);

    RequestCollection findCustom(Resource resource);

}